section
  section
    h1 Daniel Perez
    h3
      | CTO@
      a(href="http://claudetech.com" target="_blank") ClaudeTech
    h3
      i.fa.fa-github.fa-margin
      a(href="https://github.com/tuvistavie" target="_blank") tuvistavie
    h4
      a(href="http://bit.ly/metaprogramming-ex" target="_blank") http://bit.ly/metaprogramming-ex

section
  section
    h2 Today's topic
    h3 Metaprogramming in Elixir
    br
    .fragment(data-fragment-index="2")
      h4 Target audience
      ul
        li At least basic knowledge of Elixir

  section
    h3 Metaprogramming in Elixir
    ol
      li Metaprogramming and macros
      li AST and code representation
      li Writing macros
      li Writing DSLs

section
  section
    h2 What is metaprogramming?
    blockquote.fragment
      | computer programs with the ability to treat programs as their data.
  section
    h2 What is metaprogramming?
    h3 In today context:
    
    .fragment
      h3 A program which can modify itself
  
  section
    h2 How do we metaprogram?
    
    ul
      li Preprocesor macros (C, C++)
      li Reflection (Java, Go)
      li Dynamic program modification (Ruby, Python)
      li Macros modifying AST (Lisp, Elixir)

  section
    h2 A short Ruby example
    pre: code.ruby
      include ./snippets/define_method.rb

section
  section
    h2 What are macros?
    blockquote.fragment
      | a rule that specifies how a certain input sequence should be mapped to a replacement output sequence
  section
    h2 Preprocessor macros
    p Transform the program before the compiler runs
    h4 Example in C
    pre: code.c
      include ./snippets/preproc_macro.c

section
  section
    h2 A long long time ago in LispLand
    .fragment
      h3 Code is data, data is code!
  section
    h2
      | Homoiconicity 
      span.fragment: small.text-middle they say...
    .fragment
      pre: code.lisp
        | (+ 1 2 3)
      p is
      ul
        li.fragment a list containing <code>+ 1 2 3</code>
        li.fragment an expression adding <code>1 2 3</code>

  section
    h2 Back to the future
    h3.fragment And Elixir?
    p.fragment It's like Lisp...
    p.fragment but Jose hid the parentheses

section
  section
    h2 Enter the AST
  section
    h2 Abstract Syntax Tree
    img(src="images/ast.png")
  section
    h2 Compiler frontend
    img(src="images/compiler.png")
  section
    h2 AST in Elixir
    .fragment
      h3 An expression is a tuple
    .fragment
      p Simple expression
      pre: code.elixir
        | iex(1)> quote do: 1 + 2
        | {:+, [context: Elixir, import: Kernel], [1, 2]}
    .fragment
      p A little more complex expression
      pre: code.elixir
        | iex(2)> quote do 
        | ...(2)>   if a > 20, do: "major", else: "minor"  
        | ...(2)> end
        | {:if, [context: Elixir, import: Kernel],
        |  [{:>, [context: Elixir, import: Kernel], [{:a, [], Elixir}, 20]},
        |   [do: "major", else: "minor"]]}

section
  section
    h2 Writing macros
    h3 Quoting and unquoting
    ul
      li
        | <code>quote</code> transforms an expression into its AST representation
        .fragment(data-fragment-index="2") <code>`</code> in Lisp
      li <code>unquote</code> allows to inject a value in the AST
        .fragment(data-fragment-index="2") <code>,</code> in Lisp
      li <code>unquote_splicing</code> allows to inject an array in the AST
        .fragment(data-fragment-index="2") <code>,@</code> in Lisp

  section
    h2 Using <code>unquote</code>
    pre: code.elixir
      | iex(1)> a = 5
      | iex(2)> ast = quote do 
      | ...(2)>   a + 5
      | ...(2)> end
      | iex(3)> Code.eval_quoted(ast)
      | ** (CompileError) nofile:1: undefined function a/0

  section(data-transition="fade-in slide-out")
    h2 Using <code>unquote</code>
    pre: code.elixir
      | iex(1)> a = 5
      | iex(2)> ast = quote do 
      | ...(2)>   unquote(a) + 5
      | ...(2)> end
      | iex(3)> Code.eval_quoted(ast)
      | {10, []}

  section
    h2 Using <code>unquote_splicing</code>
    pre: code.elixir
      | iex(1)> args = ["a,b,c", ","]
      | iex(2)> ast = quote do
      | ...(2)>   String.split(unquote(args))
      | ...(2)> end
      | iex(3)> Code.eval_quoted(ast)
      | ** (FunctionClauseError) no function clause matching in String.Break.split/1

  section(data-transition="fade-in slide-out")
    h2 Using <code>unquote_splicing</code>
    pre: code.elixir
      | iex(1)> args = ["a,b,c", ","]
      | iex(2)> ast = quote do
      | ...(2)>   String.split(unquote_splicing(args))
      | ...(2)> end
      | iex(3)> Code.eval_quoted(ast)
      | {["a", "b", "c"], []}

section
  section
    h1 Writing macros
  section
    h2 Reimplementing <code>if</code>
    pre: code.elixir
      include ./snippets/if.ex

  section
    h2 Reimplementing <code>defdelegate</code>
    pre: code.elixir
      | defdelegate fun(a, b), to: Mod

    .fragment
      p should expand to
      pre: code.elixir
        | def fun(a, b) do
        |   Mod.fun(a, b)
        | end

  section(data-transition="fade-in slide-out")
    h2 Reimplementing <code>defdelegate</code>
    h4 Implementing <code>defdelegate</code>
    pre: code.elixir
      include ./snippets/defdelegate.ex

  section
    h2 Macro expansion
    ul
      li Macro are expanded at compile time
      li Compiler expands until it reaches a special form
      li Expansion can be checked with <code>Macro.expand</code>
      li Expanded form can be formatted with <code>Macro.to_string</code>

  section
    h2 Macro hygiene
    ul
      li Macros are hygienic by default: they do not leak
      li Macros can be non-hygienic by using <code>var!</code>

  section
    h2 A look at Plug router
    h3 Where is <code>conn</code>?
    pre: code.elixir
      | get "/hello" do
      |   send_resp(conn, 200, "world")
      | end

  section
    h2 Plug router like macro
    h4 This will not work
    pre: code.elixir
      include ./snippets/bad_router.ex
      | &nbsp;
      | # when trying to use conn
      | ** (CompileError) iex:8: undefined function conn/0

  section(data-transition="fade-in slide-out")
    h2 Plug router like macro
    pre: code.elixir
      include ./snippets/good_router.ex
      | &nbsp;
      | # somewhere else
      | get "/foo" do
      |   IO.inspect(conn)
      | end

section
  section
    h1 Writing a DSL
  section
    h2 What's a DSL?
    ul
      li Domain Specific Language
      li More or less a "mini-language"
      li Usually a set of macros/functions
    .fragment
      h3 Examples
      ul
        li Mix config
        li Phoenix router
        li ExUnit
        li.fragment
          a(href="https://github.com/tuvistavie/ex_cli") ExCLI
          | &nbsp; (Today's sample)

  section
    h2 Writing a DSL
    pre: code.elixir
      include ./snippets/simple_cli.exs

  section
    h2 We want to
    ul
      li Write the DSL macros
      li Store the data defined in macros
      li Retrieve and use the data

  section
    h2 Storing data
    ul
      li Module attributes (compile time)
      li External process (run time)

  section
    h2 Using <code>use</code>
    ul
      li
        | <code>use MyModule, opts</code> is equivalent to
        ul
          li <code>require Module</code>
          li <code>Module.__using__(opts)</code>
      li <code>use</code> is (often) used to inject functionality

  section
    h2 Defining <code>__using__</code>
    pre: code.elixir
      include ./snippets/using.ex

  section
    h2 <code>before_compile</code>
    pre: code.elixir
      include ./snippets/before_compile.ex

  section
    h2 Simple setter
    pre: code.elixir
      include ./snippets/simple_setter.ex

  section
    h2 Changing scope
    pre: code.elixir
      include ./snippets/command.ex

  section
    h2 Changing scope
    pre: code.elixir
      include ./snippets/argument.ex

  section
    h2 Definining functions
    pre: code.elixir
      include ./snippets/run.ex

  section
    h2 Trying it out
    pre: code.elixir
      include ./snippets/use_dsl.ex

section
  section
    h2 Wrapping up
    h4 Today we saw
    ul
      li Metaprogramming
      li Macros
      li How to write a DSL
    .fragment
      h4 We did not see
      ul
        li Using other processes to store data
        li How to test macros
        li Code generation
  section
    h2 Wrapping up
    h4 A few guidelines
    ul
      li Do not use macros just to use macros
      li Do not create DSLs just to create DSLs
      li Test your macros properly
      li.fragment Have fun!
